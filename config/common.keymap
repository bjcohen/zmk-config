#include <dt-bindings/zmk/hid_usage_pages.h>

#include "zmk-helpers/helper.h"

#define GALLIUM 0
#define QWERTY 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4

#define MCTL (ZMK_HID_USAGE(HID_USAGE_CONSUMER, 0xc1))
#define SPOT (ZMK_HID_USAGE(HID_USAGE_CONSUMER, 0x221))
#define DICT (ZMK_HID_USAGE(HID_USAGE_CONSUMER, 0xcf))
#define DND (ZMK_HID_USAGE(HID_USAGE_CONSUMER, 0x9b))

ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

#define MO_TOG(layer) &mo_tog layer layer
#define SC(mod) &shift_caps mod mod

/ {
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        shift_caps: behavior_shift_caps {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&caps_word>;
        };
    };
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

/ {

    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    behaviors {
        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };


        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };

    layer_listeners {
        compatible = "zmk,layer-listeners";

        lower_red {
            layers = <LOWER>;
            bindings = <&rgb_ug RGB_COLOR_HSB(0,100,100) &rgb_ug RGB_COLOR_HSB(240,100,100)>;
        };

        raise_green {
            layers = <RAISE>;
            bindings = <&rgb_ug RGB_COLOR_HSB(120,100,100) &rgb_ug RGB_COLOR_HSB(240,100,100)>;
        };

        adjust_white {
            layers = <ADJUST>;
            bindings = <&rgb_ug RGB_COLOR_HSB(0,0,100) &rgb_ug RGB_COLOR_HSB(240,100,100)>;
        };
    };
};

